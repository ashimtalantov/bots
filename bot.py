import asyncio
import logging
import os
import bcrypt
import openpyxl as exl
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from datetime import datetime

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN", "7144811796:AAE3JA9JQC3jc8Qpy0bTPbMh5fZ3_ih-bDI")
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
PASSWORD_FILE = "passwords.txt"
TABLES_FILE = "tables.txt"
EXCEL_FILE = "table.xlsx"

# –•—Ä–∞–Ω–∏–ª–∏—â–∞
user_data = {}  # {—Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä: —Ö–µ—à –ø–∞—Ä–æ–ª—è}
authenticated_users = {}  # {user_id: —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä}
allowed_tables = set()  # –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —Ç–∞–±–µ–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞

# === –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
def load_allowed_tables():
    """ –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —Ç–∞–±–µ–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤. """
    global allowed_tables
    try:
        if os.path.exists(TABLES_FILE):
            with open(TABLES_FILE, "r", encoding="utf-8") as file:
                allowed_tables = {line.strip() for line in file if line.strip()}
            logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(allowed_tables)} —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —Ç–∞–±–µ–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤.")
        else:
            logging.warning(f"–§–∞–π–ª {TABLES_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {TABLES_FILE}: {e}")

def load_passwords():
    """ –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. """
    try:
        if os.path.exists(PASSWORD_FILE):
            with open(PASSWORD_FILE, "r", encoding="utf-8") as file:
                for line in file:
                    parts = line.strip().split(":", 1)
                    if len(parts) == 2:
                        table_number, password_hash = parts
                        user_data[table_number] = password_hash.encode('utf-8')
            logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(user_data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        else:
            logging.warning(f"–§–∞–π–ª {PASSWORD_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {PASSWORD_FILE}: {e}")

# === –†–∞–±–æ—Ç–∞ —Å –ø–∞—Ä–æ–ª—è–º–∏ ===
def save_password(table_number, password):
    """ –•–µ—à–∏—Ä—É–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å. """
    salt = bcrypt.gensalt()
    password_hash = bcrypt.hashpw(password.encode(), salt)
    with open(PASSWORD_FILE, "a", encoding="utf-8") as file:
        file.write(f"{table_number}:{password_hash.decode()}\n")
    user_data[table_number] = password_hash

def check_password(table_number, password):
    """ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –≤–≤–µ–¥—ë–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–º—É —Ö–µ—à—É. """
    password_hash = user_data.get(table_number)
    return password_hash and bcrypt.checkpw(password.encode(), password_hash)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
load_allowed_tables()
load_passwords()

# === –°–æ—Å—Ç–æ—è–Ω–∏—è FSM ===
class AuthState(StatesGroup):
    waiting_for_table = State()
    waiting_for_password = State()

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ===
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    """ –ó–∞–ø—Ä–æ—Å —Ç–∞–±–µ–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ. """
    await state.clear()
    await state.set_state(AuthState.waiting_for_table)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:")

@dp.message(AuthState.waiting_for_table, F.text)
async def process_table_number(message: types.Message, state: FSMContext):
    """ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ —Ç–∞–±–µ–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞. """
    table_number = message.text.strip()

    if table_number not in allowed_tables:
        await message.answer("–û—à–∏–±–∫–∞: —ç—Ç–æ—Ç —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω.")
        return

    await state.update_data(table_number=table_number)

    if table_number in user_data:
        await state.set_state(AuthState.waiting_for_password)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞:")
    else:
        await state.set_state(AuthState.waiting_for_password)
        await message.answer("–≠—Ç–æ—Ç —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")

@dp.message(AuthState.waiting_for_password, F.text)
async def process_password(message: types.Message, state: FSMContext):
    """ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. """
    user_state = await state.get_data()
    table_number = user_state.get("table_number")
    password = message.text.strip()

    if not table_number:
        await message.answer("–û—à–∏–±–∫–∞: —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ /start.")
        await state.clear()
        return

    if table_number not in user_data:
        save_password(table_number, password)
        authenticated_users[message.from_user.id] = table_number
        await state.clear()
        await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –í—ã –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É.\n–¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã: /table –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞–±–µ–ª—è –∏–ª–∏ /logout –¥–ª—è –≤—ã—Ö–æ–¥–∞.")
    elif check_password(table_number, password):
        authenticated_users[message.from_user.id] = table_number
        await state.clear()
        await message.answer("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n–¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã: /table –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞–±–µ–ª—è –∏–ª–∏ /logout –¥–ª—è –≤—ã—Ö–æ–¥–∞.")
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.message(Command("table"))
async def cmd_table(message: types.Message):
    """ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —Ç–∞–±–µ–ª—è. """
    user_id = message.from_user.id

    if user_id in authenticated_users:
        table_number = authenticated_users[user_id]
        await get_timesheet(message, table_number)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É —Å –ø–æ–º–æ—â—å—é /start.")

@dp.message(Command("logout"))
async def cmd_logout(message: types.Message):
    """ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã. """
    user_id = message.from_user.id

    if user_id in authenticated_users:
        del authenticated_users[user_id]
        await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞.")
    else:
        await message.answer("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –≤—Ö–æ–¥–∞.")

async def get_timesheet(message: types.Message, table_number: str):
    """ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–∞–±–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. """
    try:
        wb = exl.load_workbook(EXCEL_FILE, data_only=True)
        sheet = wb['Sheet1']
        column_c_dict = {str(cell.value).strip(): cell.row for cell in sheet["C"] if cell.value is not None}
        row_number = column_c_dict.get(table_number)

        if row_number:
            values = [cell.value for cell in sheet[row_number]]
            headers = [cell.value.strftime("%d %b") if isinstance(cell.value, datetime) else cell.value for cell in sheet[4]]
            table_data = "\n".join(f"{header}: {value}" for header, value in zip(headers, values))
            await message.reply(f"üìä –í–∞—à —Ç–∞–±–µ–ª—å:\n\n{table_data}", parse_mode="Markdown")
        else:
            await message.answer("‚ùå –í–∞—à —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ Excel: {e}")
        await message.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ —Ç–∞–±–µ–ª—è.")

async def main():
    """ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞. """
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())